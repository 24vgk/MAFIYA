from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.input import ManagedTextInput, TextInput
from aiogram_dialog.widgets.kbd import Start, SwitchTo, Cancel, Group, Button, Select
from aiogram_dialog.widgets.text import Const, Format, List, Multi

from handlers.admin import states_dialog as states
from handlers.admin.common import MAIN_MENU_BUTTON, BACK_TO_INFO_CLIENT_BUTTON
from config_bd.Users import (
    orm_add_user,
    orm_select_user_profile,
    orm_add_user_profile,
    orm_update_user_profile_on_off,
    orm_update_user_profile_stones,
    orm_update_user_profile_gold,
    orm_update_user_profile_protection,
    orm_update_user_profile_antivirus,
    orm_update_user_profile_documents,
    orm_update_user_profile_active_role,
    orm_update_user_profile_bullet,
)
from sqlalchemy.ext.asyncio import AsyncSession


# –ü—Ä–æ–≤–µ—Ä–∫–∞ id
def check_id(id: str) -> str:
    if id.isdigit():
        return id
    raise ValueError


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
def check_digit(text: str) -> str:
    if text.isdigit():
        return text
    raise ValueError


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ id –≤–≤–µ–¥—ë–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
async def correct_id(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
):
    session: AsyncSession = dialog_manager.middleware_data["session"]
    user_db = await orm_select_user_profile(session, text)
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –ø–µ—Ä–µ–≤–æ–¥–∏ –≤ —Å–ª–µ–¥ —Å–æ—Å–æ—Ç–æ—è–Ω–∏–µ
    if user_db is not None:
        dialog_manager.dialog_data.update({"tg_id": text})
        await dialog_manager.switch_to(states.WorkingClients.CORRECT_ID)
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ id –ø–æ–≤—Ç–æ—Ä–Ω–æ
    else:
        await message.answer(text="id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
        dialog_manager.dialog_data.clear()
        await dialog_manager.switch_to(states.WorkingClients.MAIN)


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–µ id
async def uncorrect_id(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
):
    await message.answer(text="id –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(states.WorkingClients.MAIN)


# –•—ç–Ω–¥–ª–µ—Ä –∑–∞–ø–∏—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
async def select_currency(
    button: Button, callback: CallbackQuery, dialog_manager: DialogManager, item_id: str
):
    dialog_manager.dialog_data.update({"currency": item_id})
    await dialog_manager.switch_to(states.WorkingClients.INPUT_NEW_VALUE)


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –î–û–ü–ò–°–ê–¢–¨ –ó–ê–ü–ò–°–¨ –í –ò–°–¢–û–†–ò–Æ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô!!!!!!
async def correct_new_balance(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
):
    tg_id = dialog_manager.dialog_data["tg_id"]
    currency = dialog_manager.dialog_data["currency"]
    session = dialog_manager.middleware_data["session"]
    new_value = int(text)
    dialog_manager.dialog_data.update({"amount": new_value})
    if currency == "gold":
        await orm_update_user_profile_gold(session, tg_id, new_value)
    elif currency == "stones":
        await orm_update_user_profile_stones(session, tg_id, new_value)
    elif currency == "protection":
        await orm_update_user_profile_protection(session, tg_id, new_value)
    elif currency == "documents":
        await orm_update_user_profile_documents(session, tg_id, new_value)
    elif currency == "antivirus":
        await orm_update_user_profile_antivirus(session, tg_id, new_value)
    elif currency == "active_role":
        await orm_update_user_profile_active_role(session, tg_id, new_value)
    elif currency == "bullet":
        await orm_update_user_profile_bullet(session, tg_id, new_value)
    await dialog_manager.switch_to(states.WorkingClients.SEND_UPDATE_VALUE)


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ —á–∏—Å–ª–∞
async def uncorrect_new_balance(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
):
    await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
    await dialog_manager.switch_to(states.WorkingClients.INPUT_NEW_VALUE)


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
async def send_balance_user(
    callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    tg_id = dialog_manager.dialog_data["tg_id"]
    amount = dialog_manager.dialog_data["amount"]
    output_currency = dialog_manager.dialog_data["output_currency"]
    # –≤—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.bot.send_message(
        chat_id=tg_id,
        text="–í–∞—à –±–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã {output_currency} –∏–∑–º–µ–Ω–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ‚úÖ\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å {output_currency}: {amount}",
        # reply_markup=inline.distribution_admin, –ö–ù–û–ü–ö–ê –í –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢
    )
    await dialog_manager.switch_to(states.WorkingClients.CORRECT_ID)


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –£–¥–∞–ª–∏—Ç—å –≤ –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
async def deleting_user(
    callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    tg_id = dialog_manager.dialog_data["tg_id"]
    session: AsyncSession = dialog_manager.middleware_data["session"]
    # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
    print("–£–î–ê–õ–ï–ù–ò–ï")
    await dialog_manager.switch_to(state=states.WorkingClients.DELETING)


# –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –æ–∫–Ω–æ
async def id_getter(dialog_manager: DialogManager, **kwargs):
    tg_id = dialog_manager.dialog_data["tg_id"]
    session: AsyncSession = dialog_manager.middleware_data["session"]
    user_db = await orm_select_user_profile(session, tg_id)
    return {
        # –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –∏ —é–∑–µ—Ä–Ω–µ–π–º
        "tg_id": tg_id,
        "gold": user_db.gold,
        "stones": user_db.stones,
        "protection": user_db.protection,
        "documents": user_db.documents,
        "antivirus": user_db.antivirus,
        "active_role": user_db.active_role,
        "bullet": user_db.bullet,
    }


# –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∞–ª—é—Ç –≤ –æ–∫–Ω–æ
async def get_currency(**kwargs):
    currency = [
        ("üí∞ –ó–æ–ª–æ—Ç–æ", "gold"),
        ("üíé –ö–∞–º–Ω–∏", "stones"),
        ("üõ° –ó–∞—â–∏—Ç–∞", "protection"),
        ("üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã", "documents"),
        ("üìÄ –ê–Ω—Ç–∏–≤–∏—Ä—É—Å", "antivirus"),
        ("üéé –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å", "active_role"),
        ("‚ò† –ë—Ä–æ–Ω–µ–±–æ–π–Ω–∞—è –ø—É–ª—è", "bullet"),
    ]
    return {"currency": currency}


# –ì–µ—Ç—Ç–µ—Ä –ø–µ—Ä–µ–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ –≤–∞–ª—é—Ç—ã
async def select_currency_getter(dialog_manager: DialogManager, **kwargs):
    currency = dialog_manager.dialog_data["currency"]
    if currency == "gold":
        output_currency = "üí∞ –ó–æ–ª–æ—Ç–æ"
    elif currency == "stones":
        output_currency = "üíé –ö–∞–º–Ω–∏"
    elif currency == "protection":
        output_currency = "üõ° –ó–∞—â–∏—Ç–∞"
    elif currency == "documents":
        output_currency = "üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã"
    elif currency == "antivirus":
        output_currency = "üìÄ –ê–Ω—Ç–∏–≤–∏—Ä—É—Å"
    elif currency == "active_role":
        output_currency = "üéé –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å"
    elif currency == "bullet":
        output_currency = "‚ò† –ë—Ä–æ–Ω–µ–±–æ–π–Ω–∞—è –ø—É–ª—è"
    dialog_manager.dialog_data.update({"output_currency": output_currency})
    return {"output_currency": output_currency}


# –ì–µ—Ç—Ç–µ—Ä –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
async def send_update_value_getter(dialog_manager: DialogManager, **kwargs):
    return dialog_manager.dialog_data


# –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è
async def id_for_del_getter(dialog_manager: DialogManager, **kwargs):
    tg_id = dialog_manager.dialog_data["tg_id"]
    return {"tg_id": tg_id}


# –û–∫–Ω–æ –≤–≤–æ–¥–∞ id –∫–ª–∏–µ–Ω—Ç–∞
working_clients_window = Window(
    Const(text="–í–≤–µ–¥–∏—Ç–µ tg id –∫–ª–∏–µ–Ω—Ç–∞:"),
    TextInput(
        id="id_input",
        type_factory=check_id,
        on_success=correct_id,
        on_error=uncorrect_id,
    ),
    MAIN_MENU_BUTTON,
    state=states.WorkingClients.MAIN,
)


# –û–∫–Ω–æ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º
correct_id_window = Window(
    Multi(
        # Format("<b>User:</b> {name_user}\n", when="name_user"),
        Format("<b>ID:</b> <code>{tg_id}</code>"),
        # Format("\n<b>Username:</b> <code>{login}</code>", when="login"),
        Format(
            "üí∞ –ó–æ–ª–æ—Ç–æ: {gold}\n"
            "üíé –ö–∞–º–Ω–∏: {stones}\n"
            "üõ° –ó–∞—â–∏—Ç–∞: {protection}\n"
            "üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã: {documents}\n"
            "üìÄ –ê–Ω—Ç–∏–≤–∏—Ä—É—Å: {antivirus}\n"
            "üéé –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: {active_role}\n"
            "‚ò† –ë—Ä–æ–Ω–µ–±–æ–π–Ω–∞—è –ø—É–ª—è: {bullet}\n"
        ),
    ),
    Group(
        SwitchTo(
            text=Const("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
            id="update_balance",
            state=states.WorkingClients.NEW_BALANCE,
        ),
        SwitchTo(
            text=Const("–ò—Å—Ç–æ—Ä–∏—è"),
            id="history_pay",
            state=states.WorkingClients.HISTORY,
        ),
        SwitchTo(
            text=Const("–ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã"),
            id="add_bonus",
            state=states.WorkingClients.INPUT_BONUS,
        ),
        SwitchTo(
            text=Const("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"),
            id="delete_user",
            state=states.WorkingClients.DELETE_USER,
        ),
        MAIN_MENU_BUTTON,
        width=2,
    ),
    getter=id_getter,
    state=states.WorkingClients.CORRECT_ID,
)


# –û–∫–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
new_balance_window = Window(
    Const("–í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å"),
    Group(
        Select(
            Format("{item[0]}"),
            id="currency",
            item_id_getter=lambda x: x[1],
            items="currency",
            on_click=select_currency,
        ),
        width=2,
    ),
    BACK_TO_INFO_CLIENT_BUTTON,
    getter=get_currency,
    state=states.WorkingClients.NEW_BALANCE,
)


# –û–∫–Ω–æ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
input_new_value_window = Window(
    Format(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã {output_currency}:"),
    TextInput(
        id="new_value_input",
        type_factory=check_digit,
        on_success=correct_new_balance,
        on_error=uncorrect_new_balance,
    ),
    getter=select_currency_getter,
    state=states.WorkingClients.INPUT_NEW_VALUE,
)


# –û–∫–Ω–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
send_update_value_window = Window(
    Format(
        text="–ë–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã {output_currency} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å id {tg_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {amount}\n\n"
        "–í—ã—Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É?"
    ),
    Group(
        SwitchTo(
            text=Const("–ù–µ—Ç"), id="no_send_balance_user", state=states.WorkingClients.CORRECT_ID
        ),
        Button(text=Const("–î–∞"), id="send_balance_user", on_click=send_balance_user),
    ),
    getter=send_update_value_getter,
    state=states.WorkingClients.SEND_UPDATE_VALUE,
)


# –û–∫–Ω–æ –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
delete_user_window = Window(
    Format(text="–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ -  {tg_id} ?"),
    Group(
        SwitchTo(
            text=Const("–ù–µ—Ç"), id="no_deleting", state=states.WorkingClients.CORRECT_ID
        ),
        Button(text=Const("–£–¥–∞–ª–∏—Ç—å"), id="deleting_user", on_click=deleting_user),
    ),
    getter=id_for_del_getter,
    state=states.WorkingClients.DELETE_USER,
)


# –û–∫–Ω–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
deleting_user_window = Window(
    Format(text=" –ö–ª–∏–µ–Ω—Ç - {tg_id} —É–¥–∞–ª–µ–Ω üóëÔ∏è"),
    MAIN_MENU_BUTTON,
    getter=id_for_del_getter,
    state=states.WorkingClients.DELETING,
)

working_clients_dialog = Dialog(
    working_clients_window,
    correct_id_window,
    new_balance_window,
    input_new_value_window,
    send_update_value_window,
    delete_user_window,
    deleting_user_window,
)
