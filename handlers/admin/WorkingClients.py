from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.input import ManagedTextInput, TextInput
from aiogram_dialog.widgets.kbd import Start, SwitchTo, Cancel, Group
from aiogram_dialog.widgets.text import Const, Format, List, Multi

from handlers.admin import states_dialog as states
from handlers.admin.common import MAIN_MENU_BUTTON


# –ü—Ä–æ–≤–µ—Ä–∫–∞ id –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def check_id(id: str) -> str:
    # s = SQL()
    # if s.SELECT_USER(id) is not None:
    if id in ["474528766", "725455605"]:
        return id
    raise ValueError


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def correct_id(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
):
    dialog_manager.dialog_data.update({"tg_id": text})
    await dialog_manager.switch_to(states.WorkingClients.CORRECT_ID)


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def uncorrect_id(
    message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str
):
    await message.answer(text="id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(states.WorkingClients.MAIN)


# –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –æ–∫–Ω–æ
async def id_getter(dialog_manager: DialogManager, **kwargs):
    tg_id = dialog_manager.dialog_data["tg_id"]
    return {
        "tg_id": tg_id,
    }


# –û–∫–Ω–æ –≤–≤–æ–¥–∞ id –∫–ª–∏–µ–Ω—Ç–∞
working_clients_window = Window(
    Const(text="–í–≤–µ–¥–∏—Ç–µ tg id –∫–ª–∏–µ–Ω—Ç–∞:"),
    TextInput(
        id="id_input",
        type_factory=check_id,
        on_success=correct_id,
        on_error=uncorrect_id,
    ),
    MAIN_MENU_BUTTON,
    state=states.WorkingClients.MAIN,
)


correct_id_window = Window(
    Multi(
        # Format("<b>User:</b> {name_user}\n", when="name_user"),
        Format("<b>ID:</b> <code>{tg_id}</code>"),
        # Format("\n<b>Username:</b> <code>{login}</code>", when="login"),
        # Format("\n\n<b>–ë–∞–ª–∞–Ω—Å:</b> {balance} üíµ\n\n"),
    ),
    Group(
        SwitchTo(
            text=Const("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
            id="update_balance",
            state=states.WorkingClients.INPUT_NEW_BALANCE,
        ),
        SwitchTo(
            text=Const("–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"),
            id="history_pay",
            state=states.WorkingClients.HISTORY_PAY,
        ),
        SwitchTo(
            text=Const("–ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã"),
            id="add_bonus",
            state=states.WorkingClients.INPUT_BONUS,
        ),
        SwitchTo(
            text=Const("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"),
            id="delete_user",
            state=states.WorkingClients.DELETE_USER,
        ),
        MAIN_MENU_BUTTON,
        width=2,
    ),
    getter=id_getter,
    state=states.WorkingClients.CORRECT_ID,
)


working_clients_dialog = Dialog(working_clients_window, correct_id_window)